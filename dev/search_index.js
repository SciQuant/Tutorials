var documenterSearchIndex = {"docs":
[{"location":"pages/t001_dynamics/","page":"1 Dynamics","title":"1 Dynamics","text":"EditURL = \"https://github.com/SciQuant/Tutorials/blob/master/src/dynamics.jl\"","category":"page"},{"location":"pages/t001_dynamics/#Tutorial-1:-Dynamics","page":"1 Dynamics","title":"Tutorial 1: Dynamics","text":"","category":"section"},{"location":"pages/t001_dynamics/","page":"1 Dynamics","title":"1 Dynamics","text":"(Image: ) (Image: )","category":"page"},{"location":"pages/t001_dynamics/","page":"1 Dynamics","title":"1 Dynamics","text":"In this tutorial, you will learn:","category":"page"},{"location":"pages/t001_dynamics/","page":"1 Dynamics","title":"1 Dynamics","text":"How to declare dynamics with arbitrary coefficients,\nHow to declare dynamics with known coefficients,\nHow to declare dynamical systems.","category":"page"},{"location":"pages/t001_dynamics/#Introduction","page":"1 Dynamics","title":"Introduction","text":"","category":"section"},{"location":"pages/t001_dynamics/","page":"1 Dynamics","title":"1 Dynamics","text":"A dynamics represents continuous time, D-dimensional Ito Systems of Stochastic Differential Equations (SDEs) in a time span mathbbI = leftt_0 T right:","category":"page"},{"location":"pages/t001_dynamics/","page":"1 Dynamics","title":"1 Dynamics","text":"dvecu(t) = f(t vecu(t)) cdot dt + g(t vecu(t)) cdot dvecW(t) quad vecu(t_0) = vecu_0","category":"page"},{"location":"pages/t001_dynamics/","page":"1 Dynamics","title":"1 Dynamics","text":"with drift coefficient f colon mathbbI times mathbbR^D rightarrow mathbbR^D, diffusion coefficient g colon mathbbI times mathbbR^D rightarrow mathbbR^D times M, M-dimensional driving Wiener correlated or uncorrelated process vecW(t) and initial condition vecu_0.","category":"page"},{"location":"pages/t001_dynamics/","page":"1 Dynamics","title":"1 Dynamics","text":"The library represents dynamics by means of two main types, SystemDynamics and ModelDynamics. The first case refers to SDEs with arbitrary coefficients while the second case is a supertype for dynamics with known coefficients that are already implemented in the library.","category":"page"},{"location":"pages/t001_dynamics/","page":"1 Dynamics","title":"1 Dynamics","text":"Finally, as discussed in the documentation, the general expression of a dynamics can be simplified depending on the noise type.","category":"page"},{"location":"pages/t001_dynamics/#Setup","page":"1 Dynamics","title":"Setup","text":"","category":"section"},{"location":"pages/t001_dynamics/","page":"1 Dynamics","title":"1 Dynamics","text":"The first step is to load the pertinent library for the tutorial:","category":"page"},{"location":"pages/t001_dynamics/","page":"1 Dynamics","title":"1 Dynamics","text":"using UniversalDynamics","category":"page"},{"location":"pages/t001_dynamics/","page":"1 Dynamics","title":"1 Dynamics","text":"Always take into account that most of the objects have documentation that can be inspected using ? followed by the object name. For example:","category":"page"},{"location":"pages/t001_dynamics/","page":"1 Dynamics","title":"1 Dynamics","text":"# Type ? to enter help mode\nhelp?> SystemDynamics","category":"page"},{"location":"pages/t001_dynamics/#System-Dynamics","page":"1 Dynamics","title":"System Dynamics","text":"","category":"section"},{"location":"pages/t001_dynamics/","page":"1 Dynamics","title":"1 Dynamics","text":"A System of Stochastic Differential Equations with arbitrary coefficients is declared by its initial condition or state, initial time, noise type and noise correlations. For example, a three dimensional system with scalar noise is given using:","category":"page"},{"location":"pages/t001_dynamics/","page":"1 Dynamics","title":"1 Dynamics","text":"x0 = rand(3)\nx = SystemDynamics(x0; noise=ScalarNoise())","category":"page"},{"location":"pages/t001_dynamics/","page":"1 Dynamics","title":"1 Dynamics","text":"3-dimensional system dynamics with 1-dimensional NonDiagonalNoise\n state:           [0.573837, 0.3315, 0.205048]\n in-place?        true\n Dimension:       3\n Noise dimension: 1\n diagonal noise?  false","category":"page"},{"location":"pages/t001_dynamics/","page":"1 Dynamics","title":"1 Dynamics","text":"Notice that since x0 isa Vector, the system is defined in its in-place form. Otherwise, if we would like to work with the out of place version, x0 must be defined as a SVector.","category":"page"},{"location":"pages/t001_dynamics/","page":"1 Dynamics","title":"1 Dynamics","text":"On the other hand, diagonal noise is the default noise type, for example:","category":"page"},{"location":"pages/t001_dynamics/","page":"1 Dynamics","title":"1 Dynamics","text":"y0 = rand(2)\ny = SystemDynamics(y0)","category":"page"},{"location":"pages/t001_dynamics/","page":"1 Dynamics","title":"1 Dynamics","text":"2-dimensional system dynamics with 2-dimensional DiagonalNoise\n state:           [0.420436, 0.103689]\n in-place?        true\n Dimension:       2\n Noise dimension: 2\n diagonal noise?  true","category":"page"},{"location":"pages/t001_dynamics/","page":"1 Dynamics","title":"1 Dynamics","text":"Lastly, the non-diagonal noise case with correlated noises can be given using:","category":"page"},{"location":"pages/t001_dynamics/","page":"1 Dynamics","title":"1 Dynamics","text":"z0 = rand(1)\nρ = [exp(abs(i - j) / 2 * log(0.663)) for i in 1:3, j in 1:3]\nz = SystemDynamics(z0; noise=NonDiagonalNoise(3), ρ=ρ)","category":"page"},{"location":"pages/t001_dynamics/","page":"1 Dynamics","title":"1 Dynamics","text":"1-dimensional system dynamics with 3-dimensional NonDiagonalNoise\n state:           [0.516976]\n in-place?        true\n Dimension:       1\n Noise dimension: 3\n diagonal noise?  false","category":"page"},{"location":"pages/t001_dynamics/","page":"1 Dynamics","title":"1 Dynamics","text":"Notice that coefficients for these kind of dynamics haven't been described yet. They are provided in a further step, only if needed. This will become more clear after reading the following sections.","category":"page"},{"location":"pages/t001_dynamics/#Model-Dynamics","page":"1 Dynamics","title":"Model Dynamics","text":"","category":"section"},{"location":"pages/t001_dynamics/","page":"1 Dynamics","title":"1 Dynamics","text":"A Model Dynamics refers to Stochastic Differential Equations that are known and fairly common in finance, such that it is worth having their coefficients implemented in the library. In this case, we need to provide additional parameters for the coefficients. For example, the well known One-Factor Vasicek model can be given as a One-Factor Short Rate Model of Affine type (checkout the documentation for further details) with some assumptions, namely:","category":"page"},{"location":"pages/t001_dynamics/","page":"1 Dynamics","title":"1 Dynamics","text":"κ, θ and Σ as time independent parameters,\nα = 1 and β = 0.","category":"page"},{"location":"pages/t001_dynamics/","page":"1 Dynamics","title":"1 Dynamics","text":"r0 = rand(1)\nκ(t) = 0.4363\nθ(t) = 0.0613\nΣ(t) = 0.1491\nα(t) = one(t)\nβ(t) = zero(t)\nr = OneFactorAffineModelDynamics(r0, κ, θ, Σ, α, β)","category":"page"},{"location":"pages/t001_dynamics/","page":"1 Dynamics","title":"1 Dynamics","text":"1-dimensional One-Factor Affine Short Rate model dynamics\n state:           [0.556312]\n in-place?        true\n Dimension:       1\n Noise dimension: 1\n diagonal noise?  true","category":"page"},{"location":"pages/t001_dynamics/","page":"1 Dynamics","title":"1 Dynamics","text":"As already mentioned, coefficients for these kind of dynamics are already implemented in the library. It is possible to access to them by calling either the drift or difussion functions on their in-place or out-of-place versions, which are dispatched depending on the parameters type. For example, for the in-place version we need to call coefficient!(du, u, p, t), such that:","category":"page"},{"location":"pages/t001_dynamics/","page":"1 Dynamics","title":"1 Dynamics","text":"du = similar(get_state(r))\nu = get_state(r)\np = get_parameters(r)\nt = get_t0(r)\n\ndrift!(du, u, p, t)\ndu","category":"page"},{"location":"pages/t001_dynamics/","page":"1 Dynamics","title":"1 Dynamics","text":"1-element Array{Float64,1}:\n -0.2159736247693333","category":"page"},{"location":"pages/t001_dynamics/","page":"1 Dynamics","title":"1 Dynamics","text":"du = similar(get_noise_rate_prototype(r))\ndiffusion!(du, u, p, t)\ndu","category":"page"},{"location":"pages/t001_dynamics/","page":"1 Dynamics","title":"1 Dynamics","text":"1-element Array{Float64,1}:\n 0.1491","category":"page"},{"location":"pages/t001_dynamics/","page":"1 Dynamics","title":"1 Dynamics","text":"One might wonder why do we need to implement model coefficients in the library. For this particular example, implementing fast coefficients is easy. However, for Multi-Factor models or other models, computations get more complicated and it is useful to aid the user with fast and traceble functions.","category":"page"},{"location":"pages/t001_dynamics/#Dynamical-Systems","page":"1 Dynamics","title":"Dynamical Systems","text":"","category":"section"},{"location":"pages/t001_dynamics/","page":"1 Dynamics","title":"1 Dynamics","text":"Once we have defined different dynamics, we can group them in a unique system by declaring a dynamical system (checkout the documentation for further details):","category":"page"},{"location":"pages/t001_dynamics/","page":"1 Dynamics","title":"1 Dynamics","text":"dynamics = [:x => x, :y => y, :z => z, :r => r]\nds = DynamicalSystem(dynamics)","category":"page"},{"location":"pages/t001_dynamics/","page":"1 Dynamics","title":"1 Dynamics","text":"7-dimensional dynamical system with 7-dimensional NonDiagonalNoise\n state:           [0.573837, 0.3315, 0.205048, …, 0.516976, 0.556312]\n in-place?        true\n Dimension:       7\n Noise dimension: 7\n diagonal noise?  false","category":"page"},{"location":"pages/t001_dynamics/","page":"1 Dynamics","title":"1 Dynamics","text":"A dynamical system has relevant information, such as its state:","category":"page"},{"location":"pages/t001_dynamics/","page":"1 Dynamics","title":"1 Dynamics","text":"get_state(ds)","category":"page"},{"location":"pages/t001_dynamics/","page":"1 Dynamics","title":"1 Dynamics","text":"7-element Array{Float64,1}:\n 0.5738371928307033\n 0.3315001393003736\n 0.20504833658880206\n 0.42043632157571054\n 0.10368917027753755\n 0.5169759211341427\n 0.5563117459760103","category":"page"},{"location":"pages/t001_dynamics/","page":"1 Dynamics","title":"1 Dynamics","text":"the initial time:","category":"page"},{"location":"pages/t001_dynamics/","page":"1 Dynamics","title":"1 Dynamics","text":"get_t0(ds)","category":"page"},{"location":"pages/t001_dynamics/","page":"1 Dynamics","title":"1 Dynamics","text":"0.0","category":"page"},{"location":"pages/t001_dynamics/","page":"1 Dynamics","title":"1 Dynamics","text":"the correlations between noises:","category":"page"},{"location":"pages/t001_dynamics/","page":"1 Dynamics","title":"1 Dynamics","text":"get_cor(ds)","category":"page"},{"location":"pages/t001_dynamics/","page":"1 Dynamics","title":"1 Dynamics","text":"7×7 Array{Float64,2}:\n 1.0  0.0  0.0  0.0       0.0       0.0       0.0\n 0.0  1.0  0.0  0.0       0.0       0.0       0.0\n 0.0  0.0  1.0  0.0       0.0       0.0       0.0\n 0.0  0.0  0.0  1.0       0.814248  0.663     0.0\n 0.0  0.0  0.0  0.814248  1.0       0.814248  0.0\n 0.0  0.0  0.0  0.663     0.814248  1.0       0.0\n 0.0  0.0  0.0  0.0       0.0       0.0       1.0","category":"page"},{"location":"pages/t001_dynamics/","page":"1 Dynamics","title":"1 Dynamics","text":"and the noise rate prototype, which represents, in this case, the prototype for du that the difussion function modifies in-place:","category":"page"},{"location":"pages/t001_dynamics/","page":"1 Dynamics","title":"1 Dynamics","text":"get_noise_rate_prototype(ds)","category":"page"},{"location":"pages/t001_dynamics/","page":"1 Dynamics","title":"1 Dynamics","text":"7×7 Array{Float64,2}:\n 1.0  0.0  0.0  0.0  0.0  0.0  0.0\n 1.0  0.0  0.0  0.0  0.0  0.0  0.0\n 1.0  0.0  0.0  0.0  0.0  0.0  0.0\n 0.0  1.0  0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  1.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  1.0  1.0  1.0  0.0\n 0.0  0.0  0.0  0.0  0.0  0.0  1.0","category":"page"},{"location":"pages/t001_dynamics/","page":"1 Dynamics","title":"1 Dynamics","text":"AHORA SEGUIMOS CON DESCRIBIR LAS FUNCIONES DE DRIFT Y DIFFUSION QUE PASAMOS A UN DYNAMICAL SYSTEM ESTO LO HACEMOS EN UNA PESTAÑA NUEVA.","category":"page"},{"location":"pages/t001_dynamics/","page":"1 Dynamics","title":"1 Dynamics","text":"","category":"page"},{"location":"pages/t001_dynamics/","page":"1 Dynamics","title":"1 Dynamics","text":"This page was generated using Literate.jl.","category":"page"},{"location":"pages/t002_coefficients/","page":"2 Coefficients","title":"2 Coefficients","text":"EditURL = \"https://github.com/SciQuant/Tutorials/blob/master/src/coefficients.jl\"","category":"page"},{"location":"pages/t002_coefficients/#Tutorial-2:-Coefficients","page":"2 Coefficients","title":"Tutorial 2: Coefficients","text":"","category":"section"},{"location":"pages/t002_coefficients/","page":"2 Coefficients","title":"2 Coefficients","text":"(Image: ) (Image: )","category":"page"},{"location":"pages/t002_coefficients/","page":"2 Coefficients","title":"2 Coefficients","text":"In this tutorial, you will learn:","category":"page"},{"location":"pages/t002_coefficients/","page":"2 Coefficients","title":"2 Coefficients","text":"How to declare the coefficients for dynamical systems.","category":"page"},{"location":"pages/t002_coefficients/#Introduction","page":"2 Coefficients","title":"Introduction","text":"","category":"section"},{"location":"pages/t002_coefficients/","page":"2 Coefficients","title":"2 Coefficients","text":"In the previous tutorial we have learned how to declare system dynamics as well as model dynamics individually. Next, we constructed a dynamical system by using a collection of dynamics but without considering coefficients. Now we would like to focus in the construction of the coefficients that will allows us to define a dynamical system that can be solved by applying a discretization scheme.","category":"page"},{"location":"pages/t002_coefficients/","page":"2 Coefficients","title":"2 Coefficients","text":"First we must realize that there are two types of coefficients: in-place (IIP) and out-of-place (OOP). An in-place function for a coefficient modifies an array in place by receiving its pointer as argument. An out-of-place function for a coefficient returns statically sized arrays. Depending on the size of the problem, one approach is better than the other.","category":"page"},{"location":"pages/t002_coefficients/#Setup","page":"2 Coefficients","title":"Setup","text":"","category":"section"},{"location":"pages/t002_coefficients/","page":"2 Coefficients","title":"2 Coefficients","text":"The first step is to load the pertinent libraries for the tutorial:","category":"page"},{"location":"pages/t002_coefficients/","page":"2 Coefficients","title":"2 Coefficients","text":"using UniversalDynamics\nusing UnPack\nusing Plots","category":"page"},{"location":"pages/t002_coefficients/","page":"2 Coefficients","title":"2 Coefficients","text":"Always take into account that most of the objects have documentation that can be inspected using ? followed by the object name. For example:","category":"page"},{"location":"pages/t002_coefficients/","page":"2 Coefficients","title":"2 Coefficients","text":"# Type ? to enter help mode\nhelp?> SystemDynamics","category":"page"},{"location":"pages/t002_coefficients/#In-place-coefficients","page":"2 Coefficients","title":"In place coefficients","text":"","category":"section"},{"location":"pages/t002_coefficients/","page":"2 Coefficients","title":"2 Coefficients","text":"Consider a stock S under the Black-Scholes-Merton model (BSM). Under the risk-neutral measure Q, the stock process follows:","category":"page"},{"location":"pages/t002_coefficients/","page":"2 Coefficients","title":"2 Coefficients","text":"dS(t) = r cdot s(t) cdot dt + σ cdot S(t) cdot dW^Q(t) quad S(0) = S₀","category":"page"},{"location":"pages/t002_coefficients/","page":"2 Coefficients","title":"2 Coefficients","text":"with risk-free interest rate r and volatility σ. Let's define this dynamics using what we already know from the previous tutorial:","category":"page"},{"location":"pages/t002_coefficients/","page":"2 Coefficients","title":"2 Coefficients","text":"S0 = rand(1)\nS = SystemDynamics(S0)","category":"page"},{"location":"pages/t002_coefficients/","page":"2 Coefficients","title":"2 Coefficients","text":"1-dimensional system dynamics with 1-dimensional DiagonalNoise\n state:           [0.604705]\n in-place?        true\n Dimension:       1\n Noise dimension: 1\n diagonal noise?  true","category":"page"},{"location":"pages/t002_coefficients/","page":"2 Coefficients","title":"2 Coefficients","text":"The IIP drift f! and diffusion g! coefficients are given by:","category":"page"},{"location":"pages/t002_coefficients/","page":"2 Coefficients","title":"2 Coefficients","text":"function f!(du, u, p, t)\n    # unpack risk-free rate parameter\n    @unpack r = p\n\n    # modify du in-place using current stock state S(t) = u[1]\n    du[1] = r * u[1]\n\n    return nothing\nend\n\nfunction g!(du, u, p, t)\n    # unpack volatility parameter\n    @unpack σ = p\n\n    # modify du in-place using current stock state S(t) = u[1]\n    du[1] = σ * u[1]\n\n    return nothing\nend;\nnothing #hide","category":"page"},{"location":"pages/t002_coefficients/","page":"2 Coefficients","title":"2 Coefficients","text":"Now we are ready to declare a dynamical system with coefficients, dynamics and parameters:","category":"page"},{"location":"pages/t002_coefficients/","page":"2 Coefficients","title":"2 Coefficients","text":"dynamics = [:S => S]\nparams = (r = 0.05, σ = 0.02)\nds = DynamicalSystem(f!, g!, dynamics, params)","category":"page"},{"location":"pages/t002_coefficients/","page":"2 Coefficients","title":"2 Coefficients","text":"1-dimensional dynamical system with 1-dimensional DiagonalNoise\n state:           [0.604705]\n in-place?        true\n Dimension:       1\n Noise dimension: 1\n diagonal noise?  true","category":"page"},{"location":"pages/t002_coefficients/","page":"2 Coefficients","title":"2 Coefficients","text":"We can now apply a numerical scheme to solve the SDE. For example, the fixed time step, strong order 0.5 for all kind of noises, Euler-Maruyama scheme:","category":"page"},{"location":"pages/t002_coefficients/","page":"2 Coefficients","title":"2 Coefficients","text":"sol = solve(ds, 1.; alg=UniversalDynamics.EM(), seed=1, dt=0.01)\nplot(sol)","category":"page"},{"location":"pages/t002_coefficients/","page":"2 Coefficients","title":"2 Coefficients","text":"(Image: )","category":"page"},{"location":"pages/t002_coefficients/","page":"2 Coefficients","title":"2 Coefficients","text":"Or an adaptive time step, strong order 1.5 and weak order 2.0 for diagonal and scalar noise:","category":"page"},{"location":"pages/t002_coefficients/","page":"2 Coefficients","title":"2 Coefficients","text":"sol = solve(ds, 1.; alg=UniversalDynamics.SRIW1(), seed=1)\nplot(sol)","category":"page"},{"location":"pages/t002_coefficients/","page":"2 Coefficients","title":"2 Coefficients","text":"(Image: )","category":"page"},{"location":"pages/t002_coefficients/","page":"2 Coefficients","title":"2 Coefficients","text":"Let's spice up the example and consider stochastic interest rates given by a Multi-Factor Affine Short Rate model. This will allow us to use some additional features that comes in handy for building the coefficients.","category":"page"},{"location":"pages/t002_coefficients/","page":"2 Coefficients","title":"2 Coefficients","text":"The Multi-Factor Short Rate model that we will refer to is decribed in [1] as AM₁(3) in its Ar representation and its given by a System of SDEs described in the documentation. Our library allows us to describe such complex model fairly easy, requiring only the definition of some constants and functions.","category":"page"},{"location":"pages/t002_coefficients/","page":"2 Coefficients","title":"2 Coefficients","text":"Start by loading some parameters values for the Short Rate Model:","category":"page"},{"location":"pages/t002_coefficients/","page":"2 Coefficients","title":"2 Coefficients","text":"# load some parameters\ninclude(\"assets/DaiSingletonParameters_A3_1.jl\")\n(υ₀, θ₀, r₀, μ, ν, κ_rυ, κ, ῡ, θ̄, η, σ_θυ, σ_θr, σ_rυ, σ_rθ, ζ, α_r, β_θ) = DaiSingletonParameters()","category":"page"},{"location":"pages/t002_coefficients/","page":"2 Coefficients","title":"2 Coefficients","text":"(0.008389999999999998, 1.069970971985938, 2.082652261993877, 0.366, 0.228, 0.0348, 18.0, 0.0158, 0.0827, 0.09159694318043589, 0.0212, -0.0886, 4.2, -3.77, 0.014422205101855956, 3.26e-14, 7.9e-10)","category":"page"},{"location":"pages/t002_coefficients/","page":"2 Coefficients","title":"2 Coefficients","text":"Define all Short Rate model parameters, taking into account the in-place functions:","category":"page"},{"location":"pages/t002_coefficients/","page":"2 Coefficients","title":"2 Coefficients","text":"x0 = [υ₀, θ₀, r₀]\n\nξ₀!(t) = zero(t)\n\nfunction ξ₁!(u, t)\n    u[1] = 0\n    u[2] = 0\n    u[3] = 1\n    return nothing\nend\n\nfunction ϰ!(u, t)\n    u[1,1] = μ\n    u[2,2] = ν\n    u[3,1] = κ_rυ\n    u[3,2] = -κ\n    u[3,3] = κ\n    return nothing\nend\n\nfunction θ!(u, t)\n    u[1] = ῡ\n    u[2] = θ̄\n    u[3] = θ̄\n    return nothing\nend\n\nfunction Σ!(u, t)\n    u[1,1] = η\n    u[2,1] = η * σ_θυ\n    u[2,2] = 1\n    u[2,3] = σ_θr\n    u[3,1] = η * σ_rυ\n    u[3,2] = σ_rθ\n    u[3,3] = 1\n    return nothing\nend\n\nfunction α!(u, t)\n    u[1] = 0\n    u[2] = ζ^2\n    u[3] = α_r\n    return nothing\nend\n\nfunction β!(u, t)\n    u[1,1] = 1\n    u[2,1] = β_θ\n    u[3,1] = 1\n    return nothing\nend\n\nx = MultiFactorAffineModelDynamics(x0, ϰ!, θ!, Σ!, α!, β!, ξ₀!, ξ₁!; noise=NonDiagonalNoise(3))","category":"page"},{"location":"pages/t002_coefficients/","page":"2 Coefficients","title":"2 Coefficients","text":"3-dimensional Multi-Factor Affine Short Rate model dynamics\n state:           [0.00839, 1.06997, 2.08265]\n in-place?        true\n Dimension:       3\n Noise dimension: 3\n diagonal noise?  false","category":"page"},{"location":"pages/t002_coefficients/","page":"2 Coefficients","title":"2 Coefficients","text":"We will also solve the Money Market Account B(t) differential equation for the short model in the integrator, so we have to define its dynamics:","category":"page"},{"location":"pages/t002_coefficients/","page":"2 Coefficients","title":"2 Coefficients","text":"B = SystemDynamics(ones(eltype(x), 1))","category":"page"},{"location":"pages/t002_coefficients/","page":"2 Coefficients","title":"2 Coefficients","text":"1-dimensional system dynamics with 1-dimensional DiagonalNoise\n state:           [1.0]\n in-place?        true\n Dimension:       1\n Noise dimension: 1\n diagonal noise?  true","category":"page"},{"location":"pages/t002_coefficients/","page":"2 Coefficients","title":"2 Coefficients","text":"Now, let's construct the IIP drift f! and diffusion g! coefficients for this new scenario. One useful first step is to declare a dynamical system without coefficients and checkout the noise_rate_prototype attribute, since it will help us to understand how we must build the diffusion coefficient.","category":"page"},{"location":"pages/t002_coefficients/","page":"2 Coefficients","title":"2 Coefficients","text":"dynamics = [:S => S, :x => x, :B => B]\nds = DynamicalSystem(dynamics)","category":"page"},{"location":"pages/t002_coefficients/","page":"2 Coefficients","title":"2 Coefficients","text":"5-dimensional dynamical system with 5-dimensional NonDiagonalNoise\n state:           [0.604705, 0.00839, 1.06997, 2.08265, 1.0]\n in-place?        true\n Dimension:       5\n Noise dimension: 5\n diagonal noise?  false","category":"page"},{"location":"pages/t002_coefficients/","page":"2 Coefficients","title":"2 Coefficients","text":"get_noise_rate_prototype(ds)","category":"page"},{"location":"pages/t002_coefficients/","page":"2 Coefficients","title":"2 Coefficients","text":"5×5 Array{Float64,2}:\n 1.0  0.0  0.0  0.0  0.0\n 0.0  1.0  1.0  1.0  0.0\n 0.0  1.0  1.0  1.0  0.0\n 0.0  1.0  1.0  1.0  0.0\n 0.0  0.0  0.0  0.0  1.0","category":"page"},{"location":"pages/t002_coefficients/","page":"2 Coefficients","title":"2 Coefficients","text":"function f!(du, u, p, t)\n    @unpack _dynamics, _securities_ = p\n    @unpack _x = _dynamics\n    @unpack _S_, _x_, _B_ = _securities_\n\n    S = remake(_S_, u, du)\n    x = remake(_x_, u, du)\n    B = remake(_B_, u, du)\n\n    IR = FixedIncomeSecurities(_x, x, B)\n\n    S.dx[] = IR.r(t) * S(t)\n    drift!(x.dx, x(t), get_parameters(_x), t)\n    B.dx[] = IR.r(t) * IR.B(t)\n\n    return nothing\nend\n\nfunction g!(du, u, p, t)\n    @unpack _dynamics, _securities_ = p\n    @unpack _x = _dynamics\n    @unpack _S_, _x_, _B_ = _securities_\n    @unpack σ = p\n\n    S = remake(_S_, u, du)\n    x = remake(_x_, u, du)\n    B = remake(_B_, u, du)\n\n    S.dx[] = σ * S(t)\n    diffusion!(x.dx, x(t), get_parameters(_x), t)\n    B.dx[] = zero(eltype(u))\n\n    return nothing\nend\n\nds = DynamicalSystem(f!, g!, dynamics, params)\n\nsol = solve(ds, 1.; alg=UniversalDynamics.EM(), seed=1, dt=0.01);\n\nplot(sol, vars=1)","category":"page"},{"location":"pages/t002_coefficients/","page":"2 Coefficients","title":"2 Coefficients","text":"(Image: )","category":"page"},{"location":"pages/t002_coefficients/","page":"2 Coefficients","title":"2 Coefficients","text":"plot(sol, vars=2:4)","category":"page"},{"location":"pages/t002_coefficients/","page":"2 Coefficients","title":"2 Coefficients","text":"(Image: )","category":"page"},{"location":"pages/t002_coefficients/","page":"2 Coefficients","title":"2 Coefficients","text":"plot(sol, vars=5)","category":"page"},{"location":"pages/t002_coefficients/","page":"2 Coefficients","title":"2 Coefficients","text":"(Image: )","category":"page"},{"location":"pages/t002_coefficients/","page":"2 Coefficients","title":"2 Coefficients","text":"There are many things that worth to be mentioned. y aca hablar de remake, porque esta y que nos permite hacer con respecto a no tener que usar indices por todas partes por ej. Tambien hay que hablar acerca de FixedIncomeSecurities.","category":"page"},{"location":"pages/t002_coefficients/","page":"2 Coefficients","title":"2 Coefficients","text":"[1] Dai, Q. and Singleton, K.J. (2000), Specification Analysis of Affine Term Structure Models.","category":"page"},{"location":"pages/t002_coefficients/","page":"2 Coefficients","title":"2 Coefficients","text":"","category":"page"},{"location":"pages/t002_coefficients/","page":"2 Coefficients","title":"2 Coefficients","text":"This page was generated using Literate.jl.","category":"page"},{"location":"#Introduction","page":"Introduction","title":"Introduction","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Welcome to the tutorial pages for the SciQuant's packages.","category":"page"},{"location":"#Contents","page":"Introduction","title":"Contents","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Depth = 1","category":"page"},{"location":"#How-to-start","page":"Introduction","title":"How to start","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"There are different ways to use the tutorials:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"[Recommended] Reading the html version of the tutorials. This is the recommended way if you want rapid access to the material with no setup steps. Simply click in one of the links in the Contents section.\n[Recommended] Running the Jupyter notebooks locally. A working installation of Julia in the system is required. See instructions in the How to run the notebooks locally section. This is the recommended way to follow the tutorials if you want to run the code and inspect the generated results with Paraview.\nRunning the notebook remotely via binder. In that case, go to the desired tutorial and click the icon (Image: ). No local installation of Julia needed.\nReading a non-interactive version of the notebook via nbviewer. In that case, go to the desired tutorial and click the icon (Image: )","category":"page"},{"location":"#How-to-run-the-notebooks-locally","page":"Introduction","title":"How to run the notebooks locally","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Clone the repository","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"$ git clone https://github.com/gridap/Tutorials.git","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Move into the folder and open a Julia REPL setting the current folder as the project environment.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"$ cd Tutorials\n$ julia --project=.\n$ julia\n               _\n   _       _ _(_)_     |  Documentation: https://docs.julialang.org\n  (_)     | (_) (_)    |\n   _ _   _| |_  __ _   |  Type \"?\" for help, \"]?\" for Pkg help.\n  | | | | | | |/ _` |  |\n  | | |_| | | | (_| |  |  Version 1.5.0 (2020-08-01)\n _/ |\\__'_|_|_|\\__'_|  |  Official https://julialang.org/ release\n|__/                   |\n\njulia>\n","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Instantiate the environment. This will automatically download all required packages.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"# Type ] to enter in pkg mode\n(Tutorials) pkg> instantiate","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Build the notebooks","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"# Type Ctrl+C to get back to command mode\njulia> include(\"deps/build.jl\")","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Open the notebooks","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"julia> using IJulia\njulia> notebook(dir=pwd())","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"This will open a browser window. Navigate to the notebooks folder and open the tutorial you want. Enjoy!","category":"page"}]
}
